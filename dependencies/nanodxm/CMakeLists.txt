project(nanodxm)
cmake_minimum_required(VERSION 2.8)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/nanoem.cmake)
option(${PROJECT_NAME_PREFIX}_ENABLE_TEST_RUNNER "Enable building test runner option." OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_BGFX "Enable building BGFX renderer option." OFF)
option(${PROJECT_NAME_PREFIX}_ENABLE_FUZZER "Enable building fuzzing program with libFuzzer." OFF)

include_directories(${CMAKE_SOURCE_DIR}/deps)
add_library(${PROJECT_NAME} ${${PROJECT_NAME_PREFIX}_LIBRARY_TYPE} ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.c ${PROJECT_NAME}_p.h)
set_target_properties(${PROJECT_NAME} PROPERTIES DEFINE_SYMBOL  "${PROJECT_NAME_PREFIX}_DLL_EXPORTS")

if(${PROJECT_NAME_PREFIX}_ENABLE_TEST_RUNNER)
  add_executable(${PROJECT_NAME}_test ${CMAKE_CURRENT_SOURCE_DIR}/test.c)
  target_link_libraries(${PROJECT_NAME}_test ${PROJECT_NAME})
  if(APPLE)
    find_library(FOUNDATION_FRAMEWORK CoreFoundation)
    mark_as_advanced(FOUNDATION_FRAMEWORK)
    target_link_libraries(${PROJECT_NAME}_test ${FOUNDATION_FRAMEWORK})
  endif()
endif()

if(${PROJECT_NAME_PREFIX}_ENABLE_BGFX)
  find_bgfx()
  find_path(GLM_INCLUDE_DIR glm/glm.hpp PATHS $ENV{GLM_LOCATION} NO_DEFAULT_PATH)
  mark_as_advanced(GLM_INCLUDE_DIR)
  aux_source_directory(${BGFX_EXAMPLE_COMMON_DIR}/nanovg BGFX_NANOVG_SOURCES)
  aux_source_directory(${BGFX_EXAMPLE_COMMON_DIR}/imgui BGFX_IMGUI_SOURCES)
  add_library(bgfxaux ${${PROJECT_NAME_PREFIX}_LIBRARY_TYPE} ${BGFX_IMGUI_SOURCES} ${BGFX_NANOVG_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/deps/parson/parson.c)
  add_executable(${PROJECT_NAME}_bgfx ${CMAKE_CURRENT_SOURCE_DIR}/bgfx.cc)
  include_directories(${BX_INCLUDE_DIR} ${BGFX_INCLUDE_DIR} ${BGFX_EXAMPLE_COMMON_DIR} ${BGFX_THIRDPARTY_DIR} ${BX_COMPAT_INCLUDE_PATH} ${GLM_INCLUDE_DIR} ${STB_INSTALL_PREFIX})
  target_link_libraries(${PROJECT_NAME}_bgfx ${PROJECT_NAME} bgfxaux)
  link_bgfx(${PROJECT_NAME}_bgfx)
  link_sdl2(${PROJECT_NAME}_bgfx)
  add_definitions(-DBGFX_SDL2)
endif()

if(${PROJECT_NAME_PREFIX}_ENABLE_FUZZER)
  find_library(LIBFUZZER_LIBRARY Fuzzer PATH_SUFFIXES lib PATHS /usr/lib/llvm-4.0)
  mark_as_advanced(LIBFUZZER_LIBRARY)
  add_executable(${PROJECT_NAME}_fuzz fuzz.cc)
  set_property(TARGET ${PROJECT_NAME}_fuzz APPEND PROPERTY COMPILE_OPTIONS -fsanitize=address -fno-omit-frame-pointer -fsanitize-coverage=trace-pc-guard)
  set_property(TARGET ${PROJECT_NAME}_fuzz APPEND PROPERTY LINK_FLAGS "-fsanitize=address -fno-omit-frame-pointer -fsanitize-coverage=trace-pc-guard")
  set_property(TARGET ${PROJECT_NAME}_fuzz APPEND PROPERTY LINK_LIBRARIES ${PROJECT_NAME} ${LIBFUZZER_LIBRARY})
endif()

